<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<operatorInstanceModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator/instance" xmlns:an="http://www.ibm.com/xmlns/prod/streams/spl/annotation" xmlns:tt="http://www.ibm.com/xmlns/prod/streams/spl/tupleType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <context>
    <kind>spl.utility::Custom</kind>
    <class>LabelStream1::DTree1::LatenStream</class>
    <operatorModelDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/spl/spl/utility/Custom</operatorModelDirectory>
    <applicationDirectory>/home/stream/StreamsStudio/workspace/gogo</applicationDirectory>
    <dataDirectory>/home/stream/StreamsStudio/workspace/gogo/data</dataDirectory>
    <outputDirectory>/home/stream/StreamsStudio/workspace/gogo/output/submit.Inv29/Distributed</outputDirectory>
    <toolkits>
      <toolkit isCurrentToolkit="false">
        <name>gogo</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/gogo</rootDirectory>
        <index>0</index>
      </toolkit>
      <toolkit isCurrentToolkit="true">
        <name>spl</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/spl</rootDirectory>
        <index>1</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>EAC</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/EAC</rootDirectory>
        <index>2</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.hbase</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.hbase</rootDirectory>
        <index>3</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.hdfs</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.hdfs</rootDirectory>
        <index>4</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.messaging</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.messaging2</rootDirectory>
        <index>5</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>streamsx.networkpacket</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/streamsx.networkpacket</rootDirectory>
        <index>6</index>
      </toolkit>
    </toolkits>
    <optimized>true</optimized>
    <verbose>false</verbose>
    <networkByteOrdering>false</networkByteOrdering>
    <codeBeautification>false</codeBeautification>
    <includes>
      <include>"../../../function/application/matchRule.h"</include>
      <include>"../../../type/BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u.h"</include>
      <include>"../../../type/BeJwrMS41y0utKPF0STJKL3EzLUvMKU0FAFLpAem.h"</include>
      <include>"../../../type/BeJwrMSk2Ly5KdkxJKfIGMQLyi0qKzVOKSyAiQAZIBAAT7A5n.h"</include>
      <include>"../../../type/BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt.h"</include>
      <include>"../../../type/BeJwrMSo2LckvyEwuNs9NLS5OTE8FAEDwAb9.h"</include>
      <include>"../../../type/BeJwrMSo2zUlMSs3JKTEuNctLrSjxdEkySi9xMy1LzClNNS0qzUktBgABDg3A.h"</include>
      <include>"../../../type/BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTJbfYzSItNbGktCi1GACRDBZF.h"</include>
      <include>"../../../type/BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTpdg0JzEpNQcAJh4UAw.h"</include>
      <include>"../../../type/BeJwrMcw0TSnNza0EABAkANw.h"</include>
      <include>"../../../type/BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2.h"</include>
    </includes>
    <stateVariables>
      <stateVariable>
        <name>state$nodes</name>
        <cppType>SPL::map&lt;SPL::uint32, SPL::BeJwrMSo2zUlMSs3JKTEuNctLrSjxdEkySi9xMy1LzClNNS0qzUktBgABDg3A &gt;</cppType>
        <splType>map&lt;uint32,tuple&lt;rstring label,list&lt;tuple&lt;uint32 nextID,boolean gt,float64 value&gt;&gt; rules&gt;&gt;</splType>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>118</line>
          <column>38</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$nodeReady</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>
          <cppType>SPL::boolean</cppType>
          <splType>boolean</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$15</cppExpression>
          <splExpression>false</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
            <line>119</line>
            <column>35</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>119</line>
          <column>23</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$ruleReady</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>
          <cppType>SPL::boolean</cppType>
          <splType>boolean</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$16</cppExpression>
          <splExpression>false</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
            <line>120</line>
            <column>35</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>120</line>
          <column>23</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$nextPtr</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>121</line>
          <column>22</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$nodePtr</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>122</line>
          <column>22</column>
        </sourceLocation>
      </stateVariable>
    </stateVariables>
    <runtimeConstants>
      <runtimeConstant>
        <name>lit$0</name>
        <cppType>SPL::list&lt;SPL::BeJwrMS41y0utKPF0STJKL3EzLUvMKU0FAFLpAem &gt;</cppType>
        <splType>list&lt;tuple&lt;uint32 nextID,boolean gt,float64 value&gt;&gt;</splType>
        <value>[]</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$1</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>true</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$2</name>
        <cppType>SPL::BeJwrMcw0TSnNza0EABAkANw</cppType>
        <splType>tuple&lt;int32 dummy&gt;</splType>
        <value>{dummy = 1}</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$3</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>2</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$4</name>
        <cppType>SPL::BeJwrMSo2zUlMSs3JKTEuNctLrSjxdEkySi9xMy1LzClNNS0qzUktBgABDg3A</cppType>
        <splType>tuple&lt;rstring label,list&lt;tuple&lt;uint32 nextID,boolean gt,float64 value&gt;&gt; rules&gt;</splType>
        <value>{label = "", rules = []}</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$5</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>true</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$6</name>
        <cppType>SPL::BeJwrMcw0TSnNza0EABAkANw</cppType>
        <splType>tuple&lt;int32 dummy&gt;</splType>
        <value>{dummy = 1}</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$7</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>2</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$8</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"Not ready"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$9</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$10</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$11</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>1</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$12</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"recordtp1"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$13</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"latenID"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$14</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$15</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$16</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
    </runtimeConstants>
    <sourceLocation>
      <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
      <line>112</line>
      <column>3</column>
    </sourceLocation>
    <productVersion>4.1.1.0</productVersion>
    <checkpointKind>none</checkpointKind>
  </context>

  <parameters/>

  <inputPorts>
    <inputPort>
      <index>0</index>
      <tupleCppName>iport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt</tupleCppType>
      <tupleSPLType>tuple&lt;uint32 nodeID,rstring label&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>113</line>
        <column>20</column>
      </sourceLocation>
      <tupleLogic>{
    if (SPL::boolean(!::SPL::Functions::Collections::has(state$nodes, iport$0.get_nodeID()))) 
        ::SPL::Functions::Collections::insertM(state$nodes, iport$0.get_nodeID(), SPL::BeJwrMSo2zUlMSs3JKTEuNctLrSjxdEkySi9xMy1LzClNNS0qzUktBgABDg3A(iport$0.get_label(), lit$0));
    else
        state$nodes.at(iport$0.get_nodeID()).get_label() = iport$0.get_label();
}
</tupleLogic>
      <punctLogic>{
    if ((SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2(punct-1) == SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2::FinalMarker)) 
        {
            state$nodeReady = lit$1;
            if (state$ruleReady) 
                do { SPL::BeJwrMcw0TSnNza0EABAkANw temp = lit$2; submit (temp, lit$3); } while(0);
        }
}
</punctLogic>
      <attributes>
        <attribute>
          <name>nodeID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>label</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="nodeID" type="uint32"/>
        <tt:attr name="label" type="rstring"/>
      </tuple>
    </inputPort>
    <inputPort>
      <index>1</index>
      <tupleCppName>iport$1</tupleCppName>
      <tupleCppType>SPL::BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u</tupleCppType>
      <tupleSPLType>tuple&lt;uint32 nodeID,uint32 nextID,boolean gt,float64 value,rstring label&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>113</line>
        <column>33</column>
      </sourceLocation>
      <tupleLogic>{
    if (SPL::boolean(!::SPL::Functions::Collections::has(state$nodes, iport$1.get_nodeID()))) 
        ::SPL::Functions::Collections::insertM(state$nodes, iport$1.get_nodeID(), lit$4);
    ::SPL::Functions::Collections::appendM(state$nodes.at(iport$1.get_nodeID()).get_rules(), SPL::BeJwrMS41y0utKPF0STJKL3EzLUvMKU0FAFLpAem(iport$1.get_nextID(), iport$1.get_gt(), iport$1.get_value()));
}
</tupleLogic>
      <punctLogic>{
    if ((SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2(punct-1) == SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2::FinalMarker)) 
        {
            state$ruleReady = lit$5;
            if (state$nodeReady) 
                do { SPL::BeJwrMcw0TSnNza0EABAkANw temp = lit$6; submit (temp, lit$7); } while(0);
        }
}
</punctLogic>
      <attributes>
        <attribute>
          <name>nodeID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>nextID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>gt</name>
          <cppType>SPL::boolean</cppType>
          <splType>boolean</splType>
        </attribute>
        <attribute>
          <name>value</name>
          <cppType>SPL::float64</cppType>
          <splType>float64</splType>
        </attribute>
        <attribute>
          <name>label</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="nodeID" type="uint32"/>
        <tt:attr name="nextID" type="uint32"/>
        <tt:attr name="gt" type="boolean"/>
        <tt:attr name="value" type="float64"/>
        <tt:attr name="label" type="rstring"/>
      </tuple>
    </inputPort>
    <inputPort>
      <index>2</index>
      <tupleCppName>iport$2</tupleCppName>
      <tupleCppType>SPL::BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTJbfYzSItNbGktCi1GACRDBZF</tupleCppType>
      <tupleSPLType>tuple&lt;tuple&lt;rstring srcAddr,uint16 srcPort,rstring dstAddr,uint16 dstPort&gt; flowID,map&lt;rstring,float64&gt; features&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>113</line>
        <column>46</column>
      </sourceLocation>
      <tupleLogic>{
    if ((SPL::boolean(!state$nodeReady) || SPL::boolean(!state$ruleReady))) 
        {
            ::SPL::Functions::Utility::printStringLn(lit$8);
            return;
        }
    state$nodePtr = lit$9;
    state$nextPtr = ::application::matchRule(state$nodes.at(state$nodePtr), iport$2.get_features());
    while ((state$nextPtr != lit$10))
        {
            state$nodePtr = state$nextPtr;
            state$nextPtr = ::application::matchRule(state$nodes.at(state$nodePtr), iport$2.get_features());
        }
    do { SPL::BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTpdg0JzEpNQcAJh4UAw temp = SPL::BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTpdg0JzEpNQcAJh4UAw(iport$2.get_flowID(), state$nodes.at(state$nodePtr).get_label()); submit (temp, lit$11); } while(0);
    do { SPL::BeJwrMSo2LckvyEwuNs9NLS5OTE8FAEDwAb9 temp = SPL::BeJwrMSo2LckvyEwuNs9NLS5OTE8FAEDwAb9(lit$12, ::SPL::spl_cast&lt;SPL::rstring, SPL::float64 &gt;::cast(iport$2.get_features().at(lit$13))); submit (temp, lit$14); } while(0);
}
</tupleLogic>
      <attributes>
        <attribute>
          <name>flowID</name>
          <cppType>SPL::BeJwrMSk2Ly5KdkxJKfIGMQLyi0qKzVOKSyAiQAZIBAAT7A5n</cppType>
          <splType>tuple&lt;rstring srcAddr,uint16 srcPort,rstring dstAddr,uint16 dstPort&gt;</splType>
        </attribute>
        <attribute>
          <name>features</name>
          <cppType>SPL::map&lt;SPL::rstring, SPL::float64 &gt;</cppType>
          <splType>map&lt;rstring,float64&gt;</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="flowID">
          <tt:tuple>
            <tt:attr name="srcAddr" type="rstring"/>
            <tt:attr name="srcPort" type="uint16"/>
            <tt:attr name="dstAddr" type="rstring"/>
            <tt:attr name="dstPort" type="uint16"/>
          </tt:tuple>
        </tt:attr>
        <tt:attr name="features">
          <tt:map keyType="rstring" valueType="float64"/>
        </tt:attr>
      </tuple>
    </inputPort>
  </inputPorts>

  <outputPorts>
    <outputPort>
      <index>0</index>
      <tupleCppName>oport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSo2LckvyEwuNs9NLS5OTE8FAEDwAb9</tupleCppType>
      <tupleSPLType>tuple&lt;rstring topic,rstring message&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>112</line>
        <column>4</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>topic</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
        <attribute>
          <name>message</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="topic" type="rstring"/>
        <tt:attr name="message" type="rstring"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
        <port>1</port>
        <port>2</port>
      </finalPunctuationPortScope>
    </outputPort>
    <outputPort>
      <index>1</index>
      <tupleCppName>oport$1</tupleCppName>
      <tupleCppType>SPL::BeJwrMSoxKTYvLkp2TEkp8gYxAvKLSorNU4pLICJABkjELC0nv9zTpdg0JzEpNQcAJh4UAw</tupleCppType>
      <tupleSPLType>tuple&lt;tuple&lt;rstring srcAddr,uint16 srcPort,rstring dstAddr,uint16 dstPort&gt; flowID,rstring label&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>112</line>
        <column>58</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>flowID</name>
          <cppType>SPL::BeJwrMSk2Ly5KdkxJKfIGMQLyi0qKzVOKSyAiQAZIBAAT7A5n</cppType>
          <splType>tuple&lt;rstring srcAddr,uint16 srcPort,rstring dstAddr,uint16 dstPort&gt;</splType>
        </attribute>
        <attribute>
          <name>label</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="flowID">
          <tt:tuple>
            <tt:attr name="srcAddr" type="rstring"/>
            <tt:attr name="srcPort" type="uint16"/>
            <tt:attr name="dstAddr" type="rstring"/>
            <tt:attr name="dstPort" type="uint16"/>
          </tt:tuple>
        </tt:attr>
        <tt:attr name="label" type="rstring"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
        <port>1</port>
        <port>2</port>
      </finalPunctuationPortScope>
    </outputPort>
    <outputPort>
      <index>2</index>
      <tupleCppName>oport$2</tupleCppName>
      <tupleCppType>SPL::BeJwrMcw0TSnNza0EABAkANw</tupleCppType>
      <tupleSPLType>tuple&lt;int32 dummy&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>112</line>
        <column>110</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>dummy</name>
          <cppType>SPL::int32</cppType>
          <splType>int32</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="dummy" type="int32"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
        <port>1</port>
        <port>2</port>
      </finalPunctuationPortScope>
    </outputPort>
  </outputPorts>

</operatorInstanceModel>
