<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<operatorInstanceModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator/instance" xmlns:an="http://www.ibm.com/xmlns/prod/streams/spl/annotation" xmlns:tt="http://www.ibm.com/xmlns/prod/streams/spl/tupleType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <context>
    <kind>spl.utility::Custom</kind>
    <class>LabelStream1::DTree1::NodeStream</class>
    <operatorModelDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/spl/spl/utility/Custom</operatorModelDirectory>
    <applicationDirectory>/home/stream/StreamsStudio/workspace/gogo</applicationDirectory>
    <dataDirectory>/home/stream/StreamsStudio/workspace/gogo/data</dataDirectory>
    <outputDirectory>/home/stream/StreamsStudio/workspace/gogo/output/submit.Inv27/Distributed</outputDirectory>
    <toolkits>
      <toolkit isCurrentToolkit="false">
        <name>gogo</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/gogo</rootDirectory>
        <index>0</index>
      </toolkit>
      <toolkit isCurrentToolkit="true">
        <name>spl</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/spl</rootDirectory>
        <index>1</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>EAC</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/EAC</rootDirectory>
        <index>2</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.hbase</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.hbase</rootDirectory>
        <index>3</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.hdfs</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.hdfs</rootDirectory>
        <index>4</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.messaging</name>
        <rootDirectory>/home/stream/InfoSphere_Streams/4.1.1.0/toolkits/com.ibm.streamsx.messaging2</rootDirectory>
        <index>5</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>streamsx.networkpacket</name>
        <rootDirectory>/home/stream/StreamsStudio/workspace/streamsx.networkpacket</rootDirectory>
        <index>6</index>
      </toolkit>
    </toolkits>
    <optimized>true</optimized>
    <verbose>false</verbose>
    <networkByteOrdering>false</networkByteOrdering>
    <codeBeautification>false</codeBeautification>
    <includes>
      <include>"../../../function/application/regexIsMatchAll.h"</include>
      <include>"../../../type/BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u.h"</include>
      <include>"../../../type/BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt.h"</include>
      <include>"../../../type/BeJwrMSw2ycnMSwUADOECD1.h"</include>
      <include>"../../../type/BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2.h"</include>
    </includes>
    <stateVariables>
      <stateVariable>
        <name>state$nodeOut</name>
        <cppType>SPL::BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt</cppType>
        <splType>tuple&lt;uint32 nodeID,rstring label&gt;</splType>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>64</line>
          <column>19</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$ruleOut</name>
        <cppType>SPL::BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u</cppType>
        <splType>tuple&lt;uint32 nodeID,uint32 nextID,boolean gt,float64 value,rstring label&gt;</splType>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>65</line>
          <column>19</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$nodeMatch</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$30</cppExpression>
          <splExpression>"^N(\\w*) \\[.*label=\"([^\"]*)\".*\\]$"</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
            <line>66</line>
            <column>26</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>66</line>
          <column>14</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$ruleMatch</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$31</cppExpression>
          <splExpression>"^N(\\w*)-&gt;N(\\w*) \\[.*label=\"([^\"]*)\".*\\]$"</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
            <line>67</line>
            <column>26</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
          <line>67</line>
          <column>14</column>
        </sourceLocation>
      </stateVariable>
    </stateVariables>
    <runtimeConstants>
      <runtimeConstant>
        <name>lit$0</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"111"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$1</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\1"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$2</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$3</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\2"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$4</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$5</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>": "</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$6</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"Node: "</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$7</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$8</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"2"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$9</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\1"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$10</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$11</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\2"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$12</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$13</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\3"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$14</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$15</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"^(.*) (\\0*.*w*)$"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$16</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\2"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$17</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$18</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"&gt;"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$19</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"^(.*) (\\0*.*w*)$"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$20</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"\\1"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$21</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$22</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>true</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$23</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$24</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>": "</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$25</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"-&gt;"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$26</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"Rule: "</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$27</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>1</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$28</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$29</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>1</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$30</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"^N(\\w*) \\[.*label=\"([^\"]*)\".*\\]$"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$31</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"^N(\\w*)-&gt;N(\\w*) \\[.*label=\"([^\"]*)\".*\\]$"</value>
      </runtimeConstant>
    </runtimeConstants>
    <sourceLocation>
      <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
      <line>59</line>
      <column>3</column>
    </sourceLocation>
    <productVersion>4.1.1.0</productVersion>
    <checkpointKind>none</checkpointKind>
  </context>

  <parameters/>

  <inputPorts>
    <inputPort>
      <index>0</index>
      <tupleCppName>iport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSw2ycnMSwUADOECD1</tupleCppType>
      <tupleSPLType>tuple&lt;rstring line&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>59</line>
        <column>64</column>
      </sourceLocation>
      <tupleLogic>{
    ::SPL::Functions::Utility::println(iport$0.get_line());
    if (::application::regexIsMatchAll(iport$0.get_line(), state$nodeMatch)) 
        {
            ::SPL::Functions::Utility::printStringLn(lit$0);
            state$nodeOut.get_nodeID() = ::SPL::spl_cast&lt;SPL::uint32, SPL::rstring &gt;::cast(::SPL::Functions::String::regexReplace(iport$0.get_line(), state$nodeMatch, lit$1, (SPL::boolean)lit$2));
            state$nodeOut.get_label() = ::SPL::Functions::String::regexReplace(iport$0.get_line(), state$nodeMatch, lit$3, (SPL::boolean)lit$4);
            ::SPL::Functions::Utility::printStringLn((((lit$6 + ::SPL::spl_cast&lt;SPL::rstring, SPL::uint32 &gt;::cast(state$nodeOut.get_nodeID())) + lit$5) + state$nodeOut.get_label()));
            do { SPL::BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt temp = state$nodeOut; submit (temp, lit$7); } while(0);
        }
    else
        if (::application::regexIsMatchAll(iport$0.get_line(), state$ruleMatch)) 
            {
                ::SPL::Functions::Utility::printStringLn(lit$8);
                state$ruleOut.get_nodeID() = ::SPL::spl_cast&lt;SPL::uint32, SPL::rstring &gt;::cast(::SPL::Functions::String::regexReplace(iport$0.get_line(), state$ruleMatch, lit$9, (SPL::boolean)lit$10));
                state$ruleOut.get_nextID() = ::SPL::spl_cast&lt;SPL::uint32, SPL::rstring &gt;::cast(::SPL::Functions::String::regexReplace(iport$0.get_line(), state$ruleMatch, lit$11, (SPL::boolean)lit$12));
                state$ruleOut.get_label() = ::SPL::Functions::String::regexReplace(iport$0.get_line(), state$ruleMatch, lit$13, (SPL::boolean)lit$14);
                state$ruleOut.get_value() = ::SPL::spl_cast&lt;SPL::float64, SPL::rstring &gt;::cast(::SPL::Functions::String::regexReplace(state$ruleOut.get_label(), lit$15, lit$16, (SPL::boolean)lit$17));
                if ((::SPL::Functions::String::regexReplace(state$ruleOut.get_label(), lit$19, lit$20, (SPL::boolean)lit$21) == lit$18)) 
                    state$ruleOut.get_gt() = lit$22;
                else
                    state$ruleOut.get_gt() = lit$23;
                ::SPL::Functions::Utility::printStringLn((((((lit$26 + ::SPL::spl_cast&lt;SPL::rstring, SPL::uint32 &gt;::cast(state$ruleOut.get_nodeID())) + lit$25) + ::SPL::spl_cast&lt;SPL::rstring, SPL::uint32 &gt;::cast(state$ruleOut.get_nextID())) + lit$24) + ::SPL::spl_cast&lt;SPL::rstring, SPL::float64 &gt;::cast(state$ruleOut.get_value())));
                do { SPL::BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u temp = state$ruleOut; submit (temp, lit$27); } while(0);
            }
}
</tupleLogic>
      <punctLogic>{
    if ((SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2(punct-1) == SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2::FinalMarker)) 
        {
            submit (static_cast&lt;SPL::Punctuation::Value&gt;(SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2::FinalMarker.getIndex()+1), lit$28);
            submit (static_cast&lt;SPL::Punctuation::Value&gt;(SPL::BeJyrNIo3NArPzEvJL_1dNLMpOLTI0dMvMS8yBcACkegr2::FinalMarker.getIndex()+1), lit$29);
        }
}
</punctLogic>
      <attributes>
        <attribute>
          <name>line</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="line" type="rstring"/>
      </tuple>
    </inputPort>
  </inputPorts>

  <outputPorts>
    <outputPort>
      <index>0</index>
      <tupleCppName>oport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSo1y8tPSfV0KTbNSUxKzQEANswGAt</tupleCppType>
      <tupleSPLType>tuple&lt;uint32 nodeID,rstring label&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>59</line>
        <column>4</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>nodeID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>label</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="nodeID" type="uint32"/>
        <tt:attr name="label" type="rstring"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
      </finalPunctuationPortScope>
    </outputPort>
    <outputPort>
      <index>1</index>
      <tupleCppName>oport$1</tupleCppName>
      <tupleCppType>SPL::BeJwrMS01y8tPSfV0AdKpFSWeLklG6SVupmWJOaWpxaY5iUmpOQDwWg0u</tupleCppType>
      <tupleSPLType>tuple&lt;uint32 nodeID,uint32 nextID,boolean gt,float64 value,rstring label&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>/home/stream/StreamsStudio/workspace/EAC/application/Classifier.spl</file>
        <line>59</line>
        <column>30</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>nodeID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>nextID</name>
          <cppType>SPL::uint32</cppType>
          <splType>uint32</splType>
        </attribute>
        <attribute>
          <name>gt</name>
          <cppType>SPL::boolean</cppType>
          <splType>boolean</splType>
        </attribute>
        <attribute>
          <name>value</name>
          <cppType>SPL::float64</cppType>
          <splType>float64</splType>
        </attribute>
        <attribute>
          <name>label</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="nodeID" type="uint32"/>
        <tt:attr name="nextID" type="uint32"/>
        <tt:attr name="gt" type="boolean"/>
        <tt:attr name="value" type="float64"/>
        <tt:attr name="label" type="rstring"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
      </finalPunctuationPortScope>
    </outputPort>
  </outputPorts>

</operatorInstanceModel>
